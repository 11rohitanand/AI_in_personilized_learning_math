import streamlit as st
import random
import json
import os
import time

# Expanded question_bank with 50 questions and difficulty levels
question_bank = {
    "addition": [
        {"question": "What is 5 + 3?", "options": ["7", "8", "9", "10"], "correct_answer": "8", "difficulty": "Easy"},
        {"question": "What is 12 + 7?", "options": ["18", "19", "20", "21"], "correct_answer": "19", "difficulty": "Easy"},
        {"question": "What is 20 + 15?", "options": ["30", "35", "40", "25"], "correct_answer": "35", "difficulty": "Easy"},
        {"question": "What is 45 + 23?", "options": ["67", "68", "70", "72"], "correct_answer": "68", "difficulty": "Medium"},
        {"question": "If you have 10 apples and get 8 more, how many do you have?", "options": ["16", "17", "18", "19"], "correct_answer": "18", "difficulty": "Easy"},
        {"question": "A baker sells 12 loaves in the morning and 15 in the afternoon. How many loaves did he sell?", "options": ["25", "27", "30", "32"], "correct_answer": "27", "difficulty": "Medium"},
        {"question": "Calculate: 153 + 248?", "options": ["400", "401", "402", "403"], "correct_answer": "401", "difficulty": "Hard"},
        {"question": "If a number is added to 50, the result is 115. What is the number?", "options": ["60", "65", "70", "75"], "correct_answer": "65", "difficulty": "Hard"},
        {"question": "What is the sum of 100, 200, and 300?", "options": ["500", "600", "700", "800"], "correct_answer": "600", "difficulty": "Medium"},
        {"question": "Calculate: 99 + 99?", "options": ["198", "199", "200", "201"], "correct_answer": "198", "difficulty": "Medium"},
    ],
    "subtraction": [
        {"question": "What is 10 - 4?", "options": ["5", "6", "7", "8"], "correct_answer": "6", "difficulty": "Easy"},
        {"question": "What is 25 - 10?", "options": ["10", "15", "20", "25"], "correct_answer": "15", "difficulty": "Easy"},
        {"question": "What is 50 - 20?", "options": ["20", "25", "30", "35"], "correct_answer": "30", "difficulty": "Easy"},
        {"question": "If you have 15 cookies and eat 6, how many are left?", "options": ["7", "8", "9", "10"], "correct_answer": "9", "difficulty": "Easy"},
        {"question": "Calculate: 70 - 35?", "options": ["30", "35", "40", "45"], "correct_answer": "35", "difficulty": "Medium"},
        {"question": "A bus starts with 40 people. At the first stop, 10 get off. How many are left?", "options": ["25", "30", "35", "40"], "correct_answer": "30", "difficulty": "Medium"},
        {"question": "Calculate: 1000 - 450?", "options": ["550", "650", "500", "450"], "correct_answer": "550", "difficulty": "Hard"},
        {"question": "What is 200 - 125?", "options": ["75", "80", "85", "90"], "correct_answer": "75", "difficulty": "Medium"},
        {"question": "The difference between two numbers is 25. If the larger number is 80, what is the smaller?", "options": ["50", "55", "60", "65"], "correct_answer": "55", "difficulty": "Hard"},
        {"question": "A library has 500 books. After lending some, it has 325 left. How many were lent?", "options": ["150", "175", "200", "225"], "correct_answer": "175", "difficulty": "Hard"},
    ],
    "multiplication": [
        {"question": "What is 4 x 5?", "options": ["10", "15", "20", "25"], "correct_answer": "20", "difficulty": "Easy"},
        {"question": "What is 7 x 8?", "options": ["49", "56", "63", "70"], "correct_answer": "56", "difficulty": "Medium"},
        {"question": "What is 10 x 3?", "options": ["20", "25", "30", "35"], "correct_answer": "30", "difficulty": "Easy"},
        {"question": "If there are 3 groups of 6 students, how many students are there?", "options": ["12", "15", "18", "21"], "correct_answer": "18", "difficulty": "Medium"},
        {"question": "Calculate: 11 x 4?", "options": ["33", "44", "55", "66"], "correct_answer": "44", "difficulty": "Easy"},
        {"question": "What is 12 x 12?", "options": ["132", "144", "156", "169"], "correct_answer": "144", "difficulty": "Medium"},
        {"question": "A box has 8 bags of marbles, and each bag has 15 marbles. How many marbles are there in total?", "options": ["100", "110", "120", "130"], "correct_answer": "120", "difficulty": "Hard"},
        {"question": "What is 25 x 5?", "options": ["125", "150", "175", "200"], "correct_answer": "125", "difficulty": "Medium"},
        {"question": "What is 15 x 15?", "options": ["200", "225", "250", "275"], "correct_answer": "225", "difficulty": "Hard"},
        {"question": "A car travels at 60 km/h. How far will it travel in 3 hours?", "options": ["150", "180", "200", "210"], "correct_answer": "180", "difficulty": "Hard"},
    ],
    "division": [
        {"question": "What is 12 / 3?", "options": ["2", "3", "4", "6"], "correct_answer": "4", "difficulty": "Easy"},
        {"question": "Divide: 40 / 5?", "options": ["6", "7", "8", "9"], "correct_answer": "8", "difficulty": "Medium"},
        {"question": "What is 100 / 10?", "options": ["5", "8", "10", "12"], "correct_answer": "10", "difficulty": "Easy"},
        {"question": "Share 24 candies equally among 4 friends. How many does each get?", "options": ["4", "5", "6", "8"], "correct_answer": "6", "difficulty": "Easy"},
        {"question": "Calculate: 63 / 9?", "options": ["6", "7", "8", "9"], "correct_answer": "7", "difficulty": "Medium"},
        {"question": "A farmer has 72 eggs to pack into cartons that hold 6 eggs each. How many cartons does he need?", "options": ["10", "11", "12", "13"], "correct_answer": "12", "difficulty": "Hard"},
        {"question": "What is 120 / 12?", "options": ["8", "10", "11", "12"], "correct_answer": "10", "difficulty": "Medium"},
        {"question": "If you have 99 books and pack them into boxes of 9, how many boxes do you need?", "options": ["9", "10", "11", "12"], "correct_answer": "11", "difficulty": "Hard"},
        {"question": "What is 200 / 25?", "options": ["6", "7", "8", "9"], "correct_answer": "8", "difficulty": "Hard"},
        {"question": "Divide 55 by 5?", "options": ["10", "11", "12", "13"], "correct_answer": "11", "difficulty": "Easy"},
    ],
    "fractions": [
        {"question": "What is 1/2 + 1/2?", "options": ["1", "1/2", "2", "1/4"], "correct_answer": "1", "difficulty": "Easy"},
        {"question": "What is 1/4 + 1/4?", "options": ["1/2", "1/4", "2/4", "1"], "correct_answer": "1/2", "difficulty": "Easy"},
        {"question": "If a pizza is cut into 8 slices, and you eat 3, what fraction is left?", "options": ["5/8", "3/8", "1/2", "5/5"], "correct_answer": "5/8", "difficulty": "Medium"},
        {"question": "What is 1/3 of 9?", "options": ["2", "3", "4", "5"], "correct_answer": "3", "difficulty": "Medium"},
        {"question": "Simplify 4/8?", "options": ["1/2", "1/4", "2/8", "4/4"], "correct_answer": "1/2", "difficulty": "Easy"},
        {"question": "What is 1/2 + 1/4?", "options": ["3/4", "1/2", "2/4", "1/3"], "correct_answer": "3/4", "difficulty": "Hard"},
        {"question": "Simplify 10/15?", "options": ["1/2", "2/3", "3/4", "5/5"], "correct_answer": "2/3", "difficulty": "Medium"},
        {"question": "What is 2/5 x 3/4?", "options": ["6/20", "5/9", "3/10", "1/2"], "correct_answer": "3/10", "difficulty": "Hard"},
        {"question": "Convert 0.5 to a fraction?", "options": ["1/2", "1/4", "2/5", "5/100"], "correct_answer": "1/2", "difficulty": "Easy"},
        {"question": "What is 3/4 - 1/2?", "options": ["1/4", "2/4", "1/2", "3/2"], "correct_answer": "1/4", "difficulty": "Hard"},
    ]
}

# --- State Management ---
if "user_info_submitted" not in st.session_state:
    st.session_state.user_info_submitted = False
if "student_code" not in st.session_state:
    st.session_state.student_code = ""
if "quiz_submitted" not in st.session_state:
    st.session_state.quiz_submitted = False
if 'selected_questions' not in st.session_state:
    st.session_state.selected_questions = None
if 'student_answers_current_test' not in st.session_state:
    st.session_state.student_answers_current_test = []
if 'last_score' not in st.session_state:
    st.session_state.last_score = None
if 'last_submission_time' not in st.session_state:
    st.session_state.last_submission_time = None
if 'total_correct' not in st.session_state:
    st.session_state.total_correct = None
if 'chapter_scores_data' not in st.session_state:
    st.session_state.chapter_scores_data = {}
if 'overall_score_percentage' not in st.session_state:
    st.session_state.overall_score_percentage = 0.0

# --- Local File Storage for Student Data ---
DATA_FILE_PATH = r"C:\Minor in AI- IIT Ropar\project\database\student_data.json"
DATA_DIR = os.path.dirname(DATA_FILE_PATH)

def load_data():
    """Loads student data from a local JSON file."""
    if os.path.exists(DATA_FILE_PATH) and os.path.getsize(DATA_FILE_PATH) > 0:
        with open(DATA_FILE_PATH, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    """Saves student data to a local JSON file."""
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR)
    
    with open(DATA_FILE_PATH, "w") as f:
        json.dump(data, f, indent=4)

def submit_user_info(name, student_code, student_class):
    """Saves user info to session state and local file."""
    if not name or not student_code or student_class is None:
        st.error("Please fill in all fields.")
        return False
    
    if len(student_code) != 6 or not student_code.isdigit():
        st.error("Student Code must be exactly 6 digits.")
        return False

    all_students_data = load_data()
    
    if student_code in all_students_data:
        st.session_state.user_info = all_students_data[student_code]
        st.success(f"Welcome back, {st.session_state.user_info['name']}!")
    else:
        st.session_state.user_info = {
            'name': name,
            'class': student_class,
            'quiz_history': []
        }
        all_students_data[student_code] = st.session_state.user_info
        save_data(all_students_data)
        st.success("Student information saved successfully! You can now start the quiz.")

    st.session_state.student_code = student_code
    st.session_state.user_info_submitted = True
    return True

def grade_quiz_and_analyze():
    """Grades the quiz, performs detailed analysis, and saves the result to local file."""
    total_correct = 0
    total_questions = len(st.session_state.selected_questions)
    
    chapter_scores = {ch: {'correct': 0, 'total': 0} for ch in question_bank.keys()}
    difficulty_scores = {'Easy': {'correct': 0, 'total': 0}, 'Medium': {'correct': 0, 'total': 0}, 'Hard': {'correct': 0, 'total': 0}}

    for i, q_data in enumerate(st.session_state.selected_questions):
        chapter = q_data['chapter']
        difficulty = q_data['difficulty']
        student_answer = st.session_state.student_answers_current_test[i]
        correct_answer = q_data['correct_answer']

        chapter_scores[chapter]['total'] += 1
        difficulty_scores[difficulty]['total'] += 1

        if student_answer == correct_answer:
            total_correct += 1
            chapter_scores[chapter]['correct'] += 1
            difficulty_scores[difficulty]['correct'] += 1

    st.session_state.total_correct = total_correct
    
    overall_score_percentage = (total_correct / total_questions) * 100
    st.session_state.overall_score_percentage = overall_score_percentage

    # Calculate and store chapter scores for display
    chapter_scores_data = {}
    for chapter, scores in chapter_scores.items():
        if scores['total'] > 0:
            percentage = (scores['correct'] / scores['total']) * 100
            chapter_scores_data[chapter] = percentage
    st.session_state.chapter_scores_data = chapter_scores_data

    # Save the quiz result to local file
    all_students_data = load_data()
    quiz_result = {
        'score': total_correct,
        'total_questions': total_questions,
        'timestamp': time.time(),
        'chapter_scores': st.session_state.chapter_scores_data,
        'difficulty_scores': {diff: (data['correct'] / data['total']) * 100 if data['total'] > 0 else 100 for diff, data in difficulty_scores.items()}
    }
    
    if 'quiz_history' not in all_students_data[st.session_state.student_code]:
        all_students_data[st.session_state.student_code]['quiz_history'] = []
    
    all_students_data[st.session_state.student_code]['quiz_history'].append(quiz_result)
    save_data(all_students_data)

    # Perform AI-powered analysis for strengths and weaknesses
    strengths = []
    weaknesses = []
    
    # Analyze by Chapter
    for chapter, percentage in chapter_scores_data.items():
        if percentage >= 80:
            strengths.append(f"You have a strong understanding of **{chapter.title()}** concepts.")
        elif percentage <= 50:
            weaknesses.append(f"You should focus more on **{chapter.title()}**.")

    # Analyze by Difficulty
    for difficulty, scores in difficulty_scores.items():
        if scores['total'] > 0:
            percentage = (scores['correct'] / scores['total']) * 100
            if percentage >= 75:
                strengths.append(f"You handle **{difficulty}** level questions very well.")
            elif percentage <= 50:
                weaknesses.append(f"You may need to practice more **{difficulty}** level questions.")
    
    return strengths, weaknesses

def get_last_score(student_code):
    """Retrieves the most recent quiz score from a local file."""
    all_students_data = load_data()
    if student_code in all_students_data and 'quiz_history' in all_students_data[student_code] and all_students_data[student_code]['quiz_history']:
        all_students_data[student_code]['quiz_history'].sort(key=lambda x: x['timestamp'], reverse=True)
        return all_students_data[student_code]['quiz_history'][0]['score']
    return None

def plot_chapter_scores():
    st.subheader("Performance by Chapter")
    all_students_data = load_data()
    
    if st.session_state.student_code in all_students_data and 'quiz_history' in all_students_data[st.session_state.student_code]:
        quiz_history = all_students_data[st.session_state.student_code]['quiz_history']
        
        # Sort history by timestamp to get the latest
        quiz_history.sort(key=lambda x: x['timestamp'])

        for chapter, current_percentage in st.session_state.chapter_scores_data.items():
            
            # Find the best historical score for this chapter
            best_historical_score = 0
            for quiz in quiz_history[:-1]:  # Exclude the current quiz
                if chapter in quiz['chapter_scores']:
                    best_historical_score = max(best_historical_score, quiz['chapter_scores'][chapter])

            st.write(f"**{chapter.title()}**")
            
            # Display current vs. best historical score
            if best_historical_score > 0:
                st.info(f"Previous best: {best_historical_score:.2f}%. Current score: {current_percentage:.2f}%")
                col1, col2 = st.columns(2)
                col1.metric("Current Score", f"{current_percentage:.2f}%")
                col2.metric("Previous Best", f"{best_historical_score:.2f}%", delta=current_percentage-best_historical_score)
            else:
                st.info(f"Current score: {current_percentage:.2f}% (No previous attempts recorded)")
            
            st.progress(current_percentage / 100.0)
            st.write("---")

# --- Main Streamlit App UI ---
st.title("Personalized Math Test")

if not st.session_state.user_info_submitted:
    with st.form("user_info_form"):
        st.header("Student Information")
        name = st.text_input("Your Full Name")
        student_code = st.text_input("6-digit Student Code (e.g., 123456)", max_chars=6)
        student_class = st.selectbox("Your Class", options=[None, 1, 2, 3, 4, 5])
        
        submitted = st.form_submit_button("Start Quiz")
        if submitted:
            if submit_user_info(name, student_code, student_class):
                st.session_state.last_score = get_last_score(st.session_state.student_code)
                
                all_questions_flat = []
                for chapter, questions in question_bank.items():
                    for q in questions:
                        all_questions_flat.append({"chapter": chapter, **q})
                
                st.session_state.selected_questions = random.sample(all_questions_flat, 10) # Now 10 questions
                st.session_state.student_answers_current_test = [""] * len(st.session_state.selected_questions)
                st.rerun()

else:
    if not st.session_state.quiz_submitted:
        st.subheader(f"Welcome, {st.session_state.user_info['name']}!")
        
        if st.session_state.last_score is not None:
            st.info(f"Your last score was {st.session_state.last_score} out of 10. Let's see if you can improve!")
        
        st.divider()
        st.write("Please answer the 10 random questions below.")

        with st.form("quiz_form"):
            for i, q_data in enumerate(st.session_state.selected_questions):
                st.write(f"**Question {i+1} ({q_data['chapter'].title()} - {q_data['difficulty']}):** {q_data['question']}")
                
                # Check if an option has been selected previously to set the default value
                selected_index = 0
                if st.session_state.student_answers_current_test[i] in q_data['options']:
                    selected_index = q_data['options'].index(st.session_state.student_answers_current_test[i])

                st.session_state.student_answers_current_test[i] = st.radio(
                    f"Select your answer for Q{i+1}:",
                    q_data['options'],
                    key=f"random_q_{i}",
                    index=selected_index
                )
            
            submitted = st.form_submit_button("Submit Test")
            if submitted:
                st.session_state.strengths, st.session_state.weaknesses = grade_quiz_and_analyze()
                st.session_state.quiz_submitted = True
                st.rerun()

    else:
        st.subheader("Quiz Results and Analysis")
        st.success(f"You answered {st.session_state.total_correct} out of 10 questions correctly.")
        
        st.progress(st.session_state.overall_score_percentage / 100.0, text=f"Overall Score: {st.session_state.overall_score_percentage:.2f}%")
        
        if st.session_state.last_score is not None:
            change = st.session_state.total_correct - st.session_state.last_score
            if change > 0:
                st.success(f"📈 Great job! You've improved your score by {change} points since your last attempt.")
            elif change < 0:
                st.warning(f"📉 Your score has changed by {abs(change)} points since your last attempt. Let's focus on improvement!")
            else:
                st.info("You got the same score as last time. Keep practicing!")
                
        st.divider()

        plot_chapter_scores()

        st.divider()

        # Display the AI-powered analysis
        st.subheader("Your Strengths:")
        if st.session_state.strengths:
            for strength in st.session_state.strengths:
                st.success(f"✔️ {strength}")
        else:
            st.info("You did not show any specific areas of strength in this test. Keep practicing to build confidence!")

        st.subheader("Areas for Improvement:")
        if st.session_state.weaknesses:
            for weakness in st.session_state.weaknesses:
                st.warning(f"⚠️ {weakness}")
        else:
            st.balloons()
            st.success("Your performance was excellent across the board! Keep up the great work.")

        col1, col2 = st.columns(2)
        with col1:
            if st.button("Take Test Again"):
                st.session_state.quiz_submitted = False
                all_questions_flat = []
                for chapter, questions in question_bank.items():
                    for q in questions:
                        all_questions_flat.append({"chapter": chapter, **q})
                st.session_state.selected_questions = random.sample(all_questions_flat, 10)
                st.session_state.student_answers_current_test = [""] * len(st.session_state.selected_questions)
                st.rerun()

        with col2:
            if st.button("Take test with different student"):
                for key in st.session_state.keys():
                    del st.session_state[key]
                st.rerun()
